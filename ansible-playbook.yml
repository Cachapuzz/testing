---
- name: Setup Docker, Portainer, ELK Stack, Grafana and Prometheus
  hosts: localhost
  become: true
  vars:
    grafana_password: "dev.2024.Cachapuz"
    elastic_fleet_token: "AAEAAWVsYXN0aWMvZmxlZXQtc2VydmVyL3Rva2VuLTE3Mjg5ODkxNzA3NTQ6R1BRVjhOS0pTWW11T3BtcmphQ2pDZw"
    host_ip: "192.168.2.16"

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
      register: update_result
      changed_when: update_result.cache_updated
      failed_when: update_result is failed
      tags: update

    - name: Verify apt cache updated successfully
      debug:
        msg: "Apt cache updated successfully."
      when: update_result.cache_updated
      tags: update

    - name: Upgrade all packages
      apt:
        upgrade: dist
      register: upgrade_result
      failed_when: upgrade_result is failed
      tags: upgrade

    - name: Verify all packages upgraded successfully
      debug:
        msg: "All packages upgraded successfully."
      when: upgrade_result is succeeded
      tags: upgrade

    - name: Install net-tools
      apt:
        name: net-tools
        state: present
      register: net_tools_result
      failed_when: net_tools_result is failed
      tags: install

    - name: Verify net-tools installation
      shell: dpkg -l | grep net-tools
      register: net_tools_check
      failed_when: net_tools_check.rc != 0
      changed_when: false
      tags: verify

    - name: Display net-tools version
      debug:
        msg: "Installed package: {{ net_tools_check.stdout }}"
      when: net_tools_check.rc == 0
      tags: version

    - name: Install SSH
      apt:
        name: openssh-server
        state: present
      register: ssh_result
      failed_when: ssh_result is failed
      tags: install

    - name: Verify SSH installation
      shell: dpkg -l | grep openssh-server
      register: ssh_check
      failed_when: ssh_check.rc != 0
      changed_when: false
      tags: verify

    - name: Display SSH version
      debug:
        msg: "Installed package: {{ ssh_check.stdout }}"
      when: ssh_check.rc == 0
      tags: version

    - name: Install CA Certificates
      apt:
        name: ca-certificates
        state: present
      register: ca_certificates_result
      failed_when: ca_certificates_result is failed
      tags: install

    - name: Verify CA Certificates installation
      shell: dpkg -l | grep ca-certificates
      register: ca_certificates_check
      failed_when: ca_certificates_check.rc != 0
      changed_when: false
      tags: verify

    - name: Display CA Certificates version
      debug:
        msg: "Installed package: {{ ca_certificates_check.stdout }}"
      when: ca_certificates_check.rc == 0
      tags: version

    - name: Install curl
      apt:
        name: curl
        state: present
      register: curl_result
      failed_when: curl_result is failed
      tags: install

    - name: Verify curl installation
      shell: dpkg -l | grep curl
      register: curl_check
      failed_when: curl_check.rc != 0
      changed_when: false
      tags: verify

    - name: Display curl version
      debug:
        msg: "Installed package: {{ curl_check.stdout }}"
      when: curl_check.rc == 0
      tags: version

    - name: Install necessary packages for adding repository
      apt:
        name:
          - ca-certificates
          - curl
        state: present
      register: install_ca_certificates
      failed_when: install_ca_certificates is failed
      tags: install

    - name: Create Docker keyrings directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download Docker's official GPG key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: '0644'

    - name: Add Docker repository to apt sources
      shell: |
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

    - name: Update apt package list after adding Docker repository
      apt:
        update_cache: yes

    - name: Install Docker packages
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
      register: docker_install_result
      failed_when: docker_install_result is failed
      tags: install
    
    - name: Ensure pip is installed
      apt:
        name: python3-pip
        state: present
      register: pip_installation_result
      failed_when: pip_installation_result is failed
      tags: install
    
    - name: Verify pip3 installation
      command: pip3 --version
      register: pip_version_check
      failed_when: pip_version_check.rc != 0
      changed_when: false
      tags: verify

    - name: Display pip3 version
      debug:
        msg: "Installed pip3 version: {{ pip_version_check.stdout }}"
      tags: verify
    
    - name: Install Python Docker SDK
      pip:
        name: docker
        state: present
        executable: pip3
      register: pip_install_result
      failed_when: pip_install_result is failed
      tags: install

    - name: Verify Python Docker SDK installation
      shell: python3 -c "import docker; print('Docker SDK is installed')"
      register: sdk_check
      failed_when: sdk_check.rc != 0
      changed_when: false
      tags: verify

    - name: Display Python Docker SDK verification message
      debug:
        msg: "Docker SDK verification output: {{ sdk_check.stdout }}"
      tags: verify

    - name: Verify Docker Verson installed
      command: docker --version
      register: docker_version_output
      tags: verify

    - name: Display Docker version
      debug:
        msg: "{{ docker_version_output.stdout }}"
      tags: verify

    - name: Verify Docker installation
      command: docker run hello-world
      register: docker_run_result
      failed_when: docker_run_result.rc != 0
      changed_when: false
      tags: verify

    - name: Display Docker verification message
      debug:
        msg: "Docker is installed and running. Output: {{ docker_run_result.stdout }}"
      when: docker_run_result.rc == 0
      tags: verify

    - name: Create docker group
      group:
        name: docker
        state: present
      tags: docker-group

    - name: Add user to docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
      tags: docker-group

    - name: Force group change to take effect immediately
      shell: newgrp docker || true
      changed_when: false
      become: false
      tags: docker-group

    - name: Test if Docker works without sudo
      command: docker --version
      register: docker_version_output
      failed_when: docker_version_output.rc != 0
      changed_when: false
      tags: docker-group

    - name: Display Docker version
      debug:
        msg: "{{ docker_version_output.stdout }}"
      when: docker_version_output.rc == 0
      tags: docker-group

    # Portainer setup
    - name: Create Docker volume for Portainer
      command: docker volume create portainer_data
      register: portainer_volume_output

    - name: Display Docker volume creation output
      debug:
        msg: "{{ portainer_volume_output.stdout }}"

    # Portainer setup
    - name: Create Portainer container
      docker_container:
        name: portainer
        image: portainer/portainer-ce:latest
        state: started
        restart_policy: always
        command: --admin-password '$2y$05$707FmlEulYUb31XiW8gPquHZSp.q1MES/woKdpwlYdzq0q/t8VelO'
        ports:
          - "8001:8001"
          - "9000:9000"
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          - portainer_data:/data
    
    - name: Ensure vm.max_map_count is set in sysctl.conf
      lineinfile:
        path: /etc/sysctl.conf
        line: "vm.max_map_count=262144"
        state: present
      register: sysctl_config_result
      tags: elasticsearch_heap

    - name: Apply sysctl changes
      command: sysctl -p
      register: sysctl_apply_result
      failed_when: sysctl_apply_result.rc != 0
      tags: elasticsearch_heap

    - name: Verify vm.max_map_count value
      command: sysctl vm.max_map_count
      register: sysctl_verify_result
      failed_when: "'262144' not in sysctl_verify_result.stdout"
      tags: elasticsearch_heap

    - name: Display vm.max_map_count verification output
      debug:
        msg: "vm.max_map_count set correctly: {{ sysctl_verify_result.stdout }}"
      tags: elasticsearch_heap

    - name: Run docker compose for ELK
      command: docker compose --env-file .env -f docker-compose.yml up -d
   