---
  - name: Setup Docker, Portainer, ELK Stack, Grafana and Prometheus
    hosts: localhost
    become: true
  
    tasks:
      - name: Update apt cache
        apt:
          update_cache: yes
        register: update_result
        changed_when: update_result.cache_updated
        failed_when: update_result is failed
        tags: update
  
      - name: Verify apt cache updated successfully
        debug:
          msg: "Apt cache updated successfully."
        when: update_result.cache_updated
        tags: update
  
      - name: Upgrade all packages
        apt:
          upgrade: dist
        register: upgrade_result
        failed_when: upgrade_result is failed
        tags: upgrade
  
      - name: Verify all packages upgraded successfully
        debug:
          msg: "All packages upgraded successfully."
        when: upgrade_result is succeeded
        tags: upgrade
  
      - name: Install net-tools
        apt:
          name: net-tools
          state: present
        register: net_tools_result
        failed_when: net_tools_result is failed
        tags: install
  
      - name: Verify net-tools installation
        shell: dpkg -l | grep net-tools
        register: net_tools_check
        failed_when: net_tools_check.rc != 0
        changed_when: false
        tags: verify
  
      - name: Display net-tools version
        debug:
          msg: "Installed package: {{ net_tools_check.stdout }}"
        when: net_tools_check.rc == 0
        tags: version
  
      - name: Install SSH
        apt:
          name: openssh-server
          state: present
        register: ssh_result
        failed_when: ssh_result is failed
        tags: install
  
      - name: Verify SSH installation
        shell: dpkg -l | grep openssh-server
        register: ssh_check
        failed_when: ssh_check.rc != 0
        changed_when: false
        tags: verify
  
      - name: Display SSH version
        debug:
          msg: "Installed package: {{ ssh_check.stdout }}"
        when: ssh_check.rc == 0
        tags: version
  
      - name: Install CA Certificates
        apt:
          name: ca-certificates
          state: present
        register: ca_certificates_result
        failed_when: ca_certificates_result is failed
        tags: install
  
      - name: Verify CA Certificates installation
        shell: dpkg -l | grep ca-certificates
        register: ca_certificates_check
        failed_when: ca_certificates_check.rc != 0
        changed_when: false
        tags: verify
  
      - name: Display CA Certificates version
        debug:
          msg: "Installed package: {{ ca_certificates_check.stdout }}"
        when: ca_certificates_check.rc == 0
        tags: version
  
      - name: Install curl
        apt:
          name: curl
          state: present
        register: curl_result
        failed_when: curl_result is failed
        tags: install
  
      - name: Verify curl installation
        shell: dpkg -l | grep curl
        register: curl_check
        failed_when: curl_check.rc != 0
        changed_when: false
        tags: verify
  
      - name: Display curl version
        debug:
          msg: "Installed package: {{ curl_check.stdout }}"
        when: curl_check.rc == 0
        tags: version
  
      - name: Install necessary packages for adding repository
        apt:
          name:
            - ca-certificates
            - curl
          state: present
        register: install_ca_certificates
        failed_when: install_ca_certificates is failed
        tags: install
  
      - name: Install OpenSSL on Debian/Ubuntu
        apt:
          name: openssl
          state: present
        when: ansible_facts['os_family'] == 'Debian'
        tags: build
  
      - name: Verify OpenSSL Installation
        command: openssl version
        register: openssl_version_output
        tags: build
  
      - name: Debug OpenSSL Version
        debug:
          msg: "Installed OpenSSL version: {{ openssl_version_output.stdout }}"
        tags: build

      - name: Install required dependencies
        apt:
          name: 
            - wget
            - apt-transport-https
          state: present
        tags: 
          - .net
  
      - name: Add Microsoft GPG key
        ansible.builtin.command:
          cmd: >
            wget https://packages.microsoft.com/config/ubuntu/{{ ubuntu_version }}/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
        args:
          chdir: /tmp
        tags: 
          - .net
  
      - name: Install Microsoft package repository
        ansible.builtin.command:
          cmd: dpkg -i packages-microsoft-prod.deb
        args:
          chdir: /tmp
        tags: 
          - .net
  
      - name: Update package cache after adding Microsoft repository
        apt:
          update_cache: yes
        tags: 
          - .net
  
      - name: Install .NET SDK 8.0
        apt:
          name: dotnet-sdk-8.0
          state: present
        tags: 
          - .net
  
      - name: Verify .NET installation
        shell: dotnet --version
        register: dotnet_version
        changed_when: false
        tags: 
          - .net
  
      - name: Print installed .NET version
        debug:
          msg: "Installed .NET version: {{ dotnet_version.stdout }}"
        tags: 
          - .net
  
      - name: Create Docker keyrings directory
        file:
          path: /etc/apt/keyrings
          state: directory
          mode: '0755'
  
      - name: Download Docker's official GPG key
        get_url:
          url: https://download.docker.com/linux/ubuntu/gpg
          dest: /etc/apt/keyrings/docker.asc
          mode: '0644'
  
      - name: Add Docker repository to apt sources
        shell: |
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
  
      - name: Update apt package list after adding Docker repository
        apt:
          update_cache: yes
  
      - name: Install Docker packages
        apt:
          name:
            - docker-ce
            - docker-ce-cli
            - containerd.io
            - docker-buildx-plugin
            - docker-compose-plugin
          state: present
        register: docker_install_result
        failed_when: docker_install_result is failed
        tags: install
      
      - name: Ensure pip is installed
        apt:
          name: python3-pip
          state: present
        register: pip_installation_result
        failed_when: pip_installation_result is failed
        tags: install
      
      - name: Verify pip3 installation
        command: pip3 --version
        register: pip_version_check
        failed_when: pip_version_check.rc != 0
        changed_when: false
        tags: verify
  
      - name: Display pip3 version
        debug:
          msg: "Installed pip3 version: {{ pip_version_check.stdout }}"
        tags: verify
      
      - name: Install Python Docker SDK
        pip:
          name: docker
          state: present
          executable: pip3
        register: pip_install_result
        failed_when: pip_install_result is failed
        tags: install
  
      - name: Verify Python Docker SDK installation
        shell: python3 -c "import docker; print('Docker SDK is installed')"
        register: sdk_check
        failed_when: sdk_check.rc != 0
        changed_when: false
        tags: verify
  
      - name: Display Python Docker SDK verification message
        debug:
          msg: "Docker SDK verification output: {{ sdk_check.stdout }}"
        tags: verify
  
      - name: Verify Docker Verson installed
        command: docker --version
        register: docker_version_output
        tags: verify
  
      - name: Display Docker version
        debug:
          msg: "{{ docker_version_output.stdout }}"
        tags: verify
  
      - name: Verify Docker installation
        command: docker run hello-world
        register: docker_run_result
        failed_when: docker_run_result.rc != 0
        changed_when: false
        tags: verify
  
      - name: Display Docker verification message
        debug:
          msg: "Docker is installed and running. Output: {{ docker_run_result.stdout }}"
        when: docker_run_result.rc == 0
        tags: verify
  
      - name: Create docker group
        group:
          name: docker
          state: present
        tags: build
  
      - name: Add user to docker group
        user:
          name: "{{ ansible_user }}"
          groups: docker
          append: yes
        tags: docker-group
  
      - name: Force group change to take effect immediately
        shell: newgrp docker || true
        changed_when: false
        become: false
        tags: docker-group
  
      - name: Test if Docker works without sudo
        command: docker --version
        register: docker_version_output
        failed_when: docker_version_output.rc != 0
        changed_when: false
        tags: docker-group
  
      - name: Display Docker version
        debug:
          msg: "{{ docker_version_output.stdout }}"
        when: docker_version_output.rc == 0
        tags: docker-group
  
      # Portainer setup
      - name: Create Docker volume for Portainer
        command: docker volume create portainer_data
        register: portainer_volume_output
        tags: build
  
      - name: Display Docker volume creation output
        debug:
          msg: "{{ portainer_volume_output.stdout }}"
        tags: build
  
      # Portainer setup
      - name: Create Portainer container
        docker_container:
          name: portainer
          image: portainer/portainer-ce:latest
          state: started
          restart_policy: always
          command: --admin-password '{{ portainer_password }}'
          ports:
            - "{{ portainer_internal_ports }}"
            - "{{ portainer_external_ports }}"
          volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - portainer_data:/data
        tags: build
      
      - name: Ensure vm.max_map_count is set in sysctl.conf
        lineinfile:
          path: /etc/sysctl.conf
          line: "vm.max_map_count=262144"
          state: present
        register: sysctl_config_result
        tags: build
  
      - name: Apply sysctl changes
        command: sysctl -p
        register: sysctl_apply_result
        failed_when: sysctl_apply_result.rc != 0
        tags: build
  
      - name: Verify vm.max_map_count value
        command: sysctl vm.max_map_count
        register: sysctl_verify_result
        failed_when: "'262144' not in sysctl_verify_result.stdout"
        tags: build
  
      - name: Display vm.max_map_count verification output
        debug:
          msg: "vm.max_map_count set correctly: {{ sysctl_verify_result.stdout }}"
        tags: build
  
      - name: Write vault password to a temporary file
        copy:
          content: "{{ inventorys }}"
          dest: "/tmp/vault_password.txt"
  
      - name: Decrypt .env file for Docker Compose
        command: ansible-vault decrypt --vault-password-file /tmp/vault_password.txt .env --output decrypted.env 
      
      - name: Remove temporary vault password file
        file:
          path: "/tmp/vault_password.txt"
          state: absent
  
      - name: Run docker compose for ELK
        command: docker compose --env-file decrypted.env -f docker-compose.yml up -d
        tags: build
      
      - name: Wait for ELK containers to start
        wait_for:
          timeout: 30
        tags: buil
  
      - name: Remove decrypted.env file
        file:
          path: "decrypted.env"
          state: absent
  
      - name: Adding Elastic Search as DataSource
        shell: |
          curl -X POST http://localhost:3000/api/datasources \
          -u "{{ GRAFANA_USERNAME }}:{{ GRAFANA_INITIAL_PASSWORD }}" \
          -H "Content-Type: application/json" \
          -d '{
            "name": "ELASTIC_TESTE",
            "type": "elasticsearch",
            "url": "https://192.168.2.139:9200/",
            "access": "proxy",
            "basicAuth": true,
            "basicAuthUser": "elastic",
            "secureJsonData": {
                "basicAuthPassword": "elastic123"
            },
            "jsonData": {
                "esVersion": 80,
                "timeField": "@timestamp",
                "index": ".ds-traces-apm-*",
                "tlsSkipVerify": true
            }
          }'
        register: elasticsearch_datasource_output
        tags: datasource
  
      - name: Debug Elastic Search as DataSource
        debug:
          msg: "Elastic Search DataSource Output: {{ elasticsearch_datasource_output }}"
        tags: datasource
    
      - name: Adding Prometheus as DataSource
        shell: |
          curl -X POST http://localhost:3000/api/datasources \
          -u "{{ GRAFANA_USERNAME }}:{{ GRAFANA_INITIAL_PASSWORD }}" \
          -H "Content-Type: application/json" \
          -d '{
                "name": "Prometheus",
                "type": "prometheus",
                "url": "http://192.168.2.139:9090/",
                "access": "proxy",
                "jsonData": {
                  "tlsSkipVerify": true
                }
              }'
        register: prometheus_datasource_output
        tags: datasource
      
      - name: Debug Prometheus as DataSource
        debug:
          msg: "Prometheus DataSource Output: {{ prometheus_datasource_output }}"
        tags: datasource
  
      - name: Reset Grafana admin password
        command: docker exec -i grafana grafana-cli admin reset-admin-password {{ GRAFANA_FINAL_PASSWORD }}
        register: reset_password_result
        tags: passwordreset
  
      - name: Display result
        debug:
          msg: "{{ reset_password_result.stdout }}"
        tags: passwordreset~

      - name: Navigate to the .NET application directory and run commands
        ansible.builtin.shell: |
          cd /home/{{ ansible_user }}/Desktop/testing/WebApplication1/
          dotnet restore
          dotnet build --configuration Release
          nohup dotnet run > app.log 2>&1 &
        environment:
          DOTNET_ENVIRONMENT: Production
        tags:
          - .net
          - .netup
  
      - name: Confirm the application is running
        shell: pgrep -f dotnet
        register: dotnet_pid
        failed_when: dotnet_pid.stdout == ""
        changed_when: false
        tags:
          - .net
          - .netup
  
      - name: Show the application process ID
        debug:
          msg: "Application is running with PID: {{ dotnet_pid.stdout }}"
        tags:
          - .net
          - .netup
 
      #- name: Copy certificates from ELK container
        #shell: |
          #docker cp cachapuz-testing-es01-1:/usr/share/elasticsearch/config/certs/ca/ca.crt /usr/local/share/ca-certificates/
          #docker cp cachapuz-testing-es01-1:/usr/share/elasticsearch/config/certs/ca/ca.key /usr/local/share/ca-certificates/
          #update-ca-certificates
        #tags: after-build
#  
      #- name: Create directory for Fleet Server
        #command: mkdir /home/{{ ansible_user }}/Desktop/testing/fleet-server
        #tags: after-build
#  
      #- name: Change ownership of fleet-server directory
        #file:
          #path: /home/{{ ansible_user }}/Desktop/testing/fleet-server
          #owner: "{{ ansible_user }}"
          #recurse: yes
        #tags: after-build
#      
      #- name: Create Fleet Server Policy
        #shell: |
          #curl -X POST -u elastic:elastic123 -k "http://localhost:5601/api/fleet/agent_policies" \
          #-H "Content-Type: application/json" \
          #-H "kbn-xsrf: true" \
          #-d '{
            #"name": "{{ fleet_server_policy }}",
            #"description": "A policy to configure Fleet Server",
            #"namespace": "default",
            #"is_managed": true,
            #"is_default_fleet_server": true
          #}'
        #register: policy_output
        #changed_when: "'{\"success\":true}' in policy_output.stdout"
        #tags: after-build
#      
      #- name: Debug policy output
        #debug:
          #msg: "{{ policy_output.stdout }}"
        #tags: after-build
#      
      #- name: Used policy in future task
        #shell: |
          #echo "Using policy: {{fleet_server_policy }}"
        #tags: after-build
#  
      #- name: Get Policy ID for Fleet Server Policy
        #shell: |
          #curl -X GET -u elastic:elastic123 -k "http://localhost:5601/api/fleet/agent_policies" \
          #-H "Content-Type: application/json" \
          #-H "kbn-xsrf: true"
        #register: policies
        #changed_when: false
        #tags: after-build
#  
      #- name: Extract Policy ID
        #set_fact:
          #fleet_server_policy_id: "{{ (policies.stdout | from_json)['items'] | selectattr('name', 'equalto', fleet_server_policy) | map(attribute='id') | list | first }}"
        #tags: after-build
#      
      #- name: Debug extracted Policy ID
        #debug:
          #msg: "The extracted Fleet Server Policy ID is: {{ fleet_server_policy_id }}"
        #tags: after-build
#  
      #- name: Add Fleet Server Integration to Policy
        #shell: |
          #curl -X POST -u elastic:elastic123 -k "http://localhost:5601/api/fleet/package_policies" \
          #-H "Content-Type: application/json" \
          #-H "kbn-xsrf: true" \
          #-d '{
            #"name": "fleet-server-integration",
            #"policy_id": "{{ fleet_server_policy_id }}",
            #"package": {
              #"name": "fleet_server",
              #"title": "Fleet Server",
              #"version": "8.15.1"
            #},
            #"inputs": [
              #{
                #"type": "fleet-server",
                #"enabled": true,
                #"streams": []
              #}
            #]
          #}'
        #register: integration_output
        #changed_when: "'{\"success\":true}' in integration_output.stdout"
        #tags: after-build
#  
      #- name: Debug integration output
        #debug:
          #msg: "{{ integration_output.stdout }}"
        #tags: after-build
#      
#  
#    
      #- name: Generate Fleet Server Token
        #shell: |
          #curl -X POST -u elastic:elastic123 -k "https://localhost:9200/_security/service/elastic/fleet-server/credential/token"
        #register: token_output
        #tags: after-build
#      
      #- name: Parse token from output
        #set_fact:
          #fleet_token: "{{ token_output.stdout | from_json }}"
        #tags: after-build
#      
      #- name: Debug token output
        #debug:
          #msg: "Token output: {{ fleet_token }}"
        #tags: after-build
#  
      #- name: Extract token value
        #set_fact:
          #fleet_token_value: "{{ token_output.stdout | from_json | json_query('token.value') }}"
        #tags: after-build
#  
      #- name: Debug token value
        #debug:
          #msg: "Token value: {{ fleet_token_value }}"
        #tags: after-build
#  
      #- name: Use token value in next task
        #shell: |
          #echo "Using token: {{ fleet_token_value }}"
        #register: token_usage_output
        #tags: after-build
#  
      #- name: Debug token usage output
        #debug:
          #msg: "{{ token_usage_output.stdout }}"
        #tags: after-build
#  
      #- name: Download and Extract Fleet Server
        #shell: |
          #curl -L -O https://artifacts.elastic.co/downloads/beats/elastic-agent/elastic-agent-8.15.1-linux-x86_64.tar.gz
          #mv elastic-agent-8.15.1-linux-x86_64.tar.gz /home/{{ ansible_user }}/Desktop/testing/fleet-server 
          #cd /home/{{ ansible_user }}/Desktop/testing/fleet-server/
          #tar xzvf elastic-agent-8.15.1-linux-x86_64.tar.gz
        #tags: after-build
#  
      #- name: Change ownership of elastic-agent-8.15.1 directory
        #file:
          #path: /home/{{ ansible_user }}/Desktop/testing/fleet-server/elastic-agent-8.15.1-linux-x86_64
          #owner: "{{ ansible_user }}"
          #recurse: yes
        #tags: after-build
#  
      #- name: Install Fleet Server #CHANGE Path if needed
        #shell: |
          #/home/{{ ansible_user }}/Desktop/testing/fleet-server/elastic-agent-8.15.1-linux-x86_64/elastic-agent install \
          #--fleet-server-es=https://localhost:9200 \
          #--fleet-server-service-token={{ token_usage_output }} \
          #--fleet-server-policy={{ fleet_server_policy_id }} \
          #--fleet-server-port=8220 \
          #--insecure \
          #--force \
          #--non-interactive
        #tags: after-build
#        
      #- name: Change ownership of elastic-agent-8.15.1 directory
        #file:
          #path: /home/{{ ansible_user }}/Desktop/testing/fleet-server/elastic-agent-8.15.1-linux-x86_64
          #owner: "{{ ansible_user }}"
          #recurse: yes
        #tags: error
#  
      #- name: Get Fleet Server Certs
        #shell: |
          #openssl genpkey -algorithm RSA -out /opt/Elastic/Agent/data/elastic-agent-8.15.1-ecab0c/components/certs/fleet-server.key -pkeyopt rsa_keygen_bits:2048
          #openssl req -new -key /opt/Elastic/Agent/data/elastic-agent-8.15.1-ecab0c/components/certs/fleet-server.key -out /opt/Elastic/Agent/data/elastic-agent-8.15.1-ecab0c/components/certs/fleet-server.csr -subj "/C=PT/ST=State/L=City/O=Organization/OU=OrgUnit/CN=fleet-server.local"
          #openssl x509 -req -in /opt/Elastic/Agent/data/elastic-agent-8.15.1-ecab0c/components/certs/fleet-server.csr -CA /usr/local/share/ca-certificates/ca.crt -CAkey /opt/Elastic/Agent/data/elastic-agent-8.15.1-ecab0c/components/certs/ca.key --CAcreateserial -out /opt/Elastic/Agent/data/elastic-agent-8.15.1-ecab0c/components/certs/fleet-server.crt
        #tags: error
#  
      # Elastic Agent setup
#      - name: Install Elastic Agent
        #shell: |
          #/home/{{ ansible_user }}/Desktop/testing/fleet-server/elastic-agent-8.15.1-linux-x86_64/elastic-agent enroll --url=https://localhost:8220 \
          #--fleet-server-es=https://localhost:9200 \
          #--fleet-server-service-token={{ token_usage_output }} \
          #--fleet-server-policy={{ fleet_server_policy_id }} \
          #--fleet-server-port=8220 \
          #--certificate-authorities=/usr/local/share/ca-certificates/ca.crt \
          #--fleet-server-es-ca=/usr/local/share/ca-certificates/ca.crt \
          #--fleet-server-cert=/opt/Elastic/Agent/data/elastic-agent-8.15.1-ecab0c/components/certs/fleet-server.crt \
          #--fleet-server-cert-key=/opt/Elastic/Agent/data/elastic-agent-8.15.1-ecab0c/components/certs/fleet-server.key \
          #--force
        #tags: error